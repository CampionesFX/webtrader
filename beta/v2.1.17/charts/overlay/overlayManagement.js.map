{"version":3,"sources":["../../../../../src/charts/overlay/overlayManagement.es6"],"names":["win","win_view","state","formatters","array","search","toLowerCase","filter","ind","display_name","indexOf","init","init_dialog_async","Promise","resolve","root","reject","$","i18n","option","title","modal","destroy","unbind","dialog","remove","open","isAffiliates","extend","resizable","width","Math","min","window","height","ignoreTileAction","maximizable","minimizable","collapsable","require","windows","createBlankWindow","init_state","container_id","overlays","current","clear_search","add","ovlay","symbol","delay_amount","displaySymbol","containerIDWithHash","mainSeries_timePeriod","data","type","chartOptions","charts","newTabId","replace","fn","disableEnableCandlestickAndOHLC","overlay","then","defer","trigger","refresh","selectChartType","push","dont_show","chart","highcharts","series","find","s","options","name","id","indicator_series","get_indicator_series","removeCurrentPrice","countInstrumentSeries","forEach","isInstrument","onChartIndicator","update","compare","undefined","set_indicator_series","break_loop","market","submarkets","submarket","instruments","splice","bind","update_overlays","mainSeriesName","index","map","marketData","getMarketData","includes","first_time","openDialog","normal_open","catch","console","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAOA,OAAIA,MAAM,IAAV,C,CAPA;;AAQA,OAAIC,WAAW,IAAf;AACA,OAAIC,QAAQ,EAAZ;;AAEA;AACA,yBAAGC,UAAH,CAAc,iBAAd,IAAmC,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACnDA,eAASA,UAAUA,OAAOC,WAAP,EAAnB;AACA,aAAOF,SAASA,MAAMG,MAAN,CACb,UAACC,GAAD;AAAA,gBAASA,IAAIC,YAAJ,CAAiBH,WAAjB,GAA+BI,OAA/B,CAAuCL,MAAvC,MAAmD,CAAC,CAA7D;AAAA,OADa,CAAhB;AAGF,IALD;;AAOA,OAAMM,OAAO,SAAPA,IAAO,GAAM;AAChB,UAAG,CAACX,GAAJ,EAAS;AACN,gBAAOY,8CAAP;AACF;AACD,aAAOC,QAAQC,OAAR,EAAP;AACF,IALD;;AAOA,OAAMF,oBAAoB,SAApBA,iBAAoB,CAACG,IAAD,EAAU;AACjC,aAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUE,MAAV,EAAqB;AACrCD,gBAAOE,EAAEF,IAAF,EAAQG,IAAR,EAAP;;AAEA,aAAIC,SAAS;AACVC,mBAAO,sBAAsBF,IAAtB,EADG;AAEVG,mBAAO,IAFG;AAGVC,qBAAS,mBAAM;AACZrB,2BAAYA,SAASsB,MAAT,EAAZ;AACAtB,0BAAW,IAAX;AACAD,mBAAIwB,MAAJ,CAAW,SAAX,EAAsBC,MAAtB;AACAzB,qBAAM,IAAN;AACF,aARS;AASV0B,kBAAM,gBAAM,CAAG;AATL,UAAb;;AAYA;AACA,aAAIC,cAAJ,EAAoB;AACjBR,qBAAS,iBAAES,MAAF,CAAST,MAAT,EAAiB;AACvBU,0BAAW,KADY;AAEvBC,sBAAOC,KAAKC,GAAL,CAAS,GAAT,EAAcf,EAAEgB,MAAF,EAAUH,KAAV,KAAoB,EAAlC,CAFgB;AAGvBI,uBAAQ,GAHe;AAIvBC,iCAAkB,IAJK;AAKvBC,4BAAa,KALU;AAMvBC,4BAAa,KANU;AAOvBC,4BAAa;AAPU,aAAjB,CAAT;AASF,UAVD,MAUO;AACJnB,qBAAS,iBAAES,MAAF,CAAST,MAAT,EAAiB;AACvBW,sBAAO;AADgB,aAAjB,CAAT;AAIF;;AAED;AACAS,iBAAQ,CAAC,iBAAD,CAAR,EAA6B,UAACC,OAAD,EAAa;AACvCxC,kBAAMwC,QAAQC,iBAAR,CAA0B1B,IAA1B,EAAgCI,MAAhC,CAAN;AACAuB,uBAAW3B,IAAX;AACAD;AACF,UAJD;AAMF,OAxCM,CAAP;AAyCF,IA1CD;;AA4CA,OAAM4B,aAAa,SAAbA,UAAa,CAAC3B,IAAD,EAAS;AACzBb,cAAQ;AACLsB,iBAAQ;AACLJ,mBAAO,sBAAsBF,IAAtB,EADF;AAELyB,0BAAc;AAFT,UADH;AAKLC,mBAAU;AACPvC,oBAAQ,EADD;AAEPD,mBAAO,EAFA;AAGPyC,qBAAS;AAHF;AALL,OAAR;;AAYA3C,YAAM0C,QAAN,CAAeE,YAAf,GAA8B,YAAM;AAAE5C,eAAM0C,QAAN,CAAevC,MAAf,GAAwB,EAAxB;AAA6B,OAAnE;;AAEAH,YAAM0C,QAAN,CAAeG,GAAf,GAAqB,UAACC,KAAD,EAAW;AAC7B,aAAMC,SAASD,MAAMC,MAArB;AACA,aAAMC,eAAeF,MAAME,YAA3B;AACA,aAAMC,gBAAgBH,MAAMvC,YAA5B;AACA,aAAM2C,sBAAsBlD,MAAMsB,MAAN,CAAamB,YAAzC;AACA,aAAMU,wBAAwBpC,EAAEmC,mBAAF,EAAuBE,IAAvB,CAA4B,YAA5B,CAA9B;AACA,aAAM9B,SAASP,EAAEmC,mBAAF,CAAf;AACA,aAAMG,OAAO/B,OAAO8B,IAAP,CAAY,MAAZ,CAAb;;AAEA;AACAf,iBAAQ,CAAC,qBAAD,EAAwB,eAAxB,EAAyC,aAAzC,CAAR,EAAiE,UAACiB,YAAD,EAAeC,MAAf,EAA0B;AACxF,gBAAMC,WAAWN,oBAAoBO,OAApB,CAA4B,GAA5B,EAAiC,EAAjC,EAAqCA,OAArC,CAA6C,QAA7C,EAAuD,EAAvD,CAAjB;AACA,gBAAMnC,SAASP,EAAEmC,mBAAF,CAAf;AACA,gBAAMQ,KAAK,SAALA,EAAK,GAAM;AACdpC,sBAAO8B,IAAP,CAAY,kBAAZ,EAAgC,IAAhC;AACAE,4BAAaK,+BAAb,CAA8CH,QAA9C,EAAwD,KAAxD;AACAD,sBAAOK,OAAP,CAAeV,mBAAf,EAAoCH,MAApC,EAA4CE,aAA5C,EAA2DD,YAA3D,EACIa,IADJ,CACS,YAAM;AACT,sBAAMD,UAAU,EAAEb,QAAQA,MAAV,EAAkBE,eAAeA,aAAjC,EAAgDD,cAAcA,YAA9D,EAAhB;AACA;AACA,mCAAEc,KAAF,CAAQ,YAAM;AACXxC,4BAAOyC,OAAP,CAAe,mBAAf,EAAoCH,OAApC;AACAL,4BAAOS,OAAP,CAAgBd,mBAAhB;AACF,mBAHD;AAIF,gBARJ;AASF,aAZD;AAaA,gBAAIG,SAAS,aAAT,IAA0BA,QAAQ,MAAtC,EAA8C;AAC3C/B,sBAAO8B,IAAP,CAAY,MAAZ,EAAoB,MAApB;AACA9B,sBAAOyC,OAAP,CAAe,oBAAf,EAAqC,MAArC;AACAT,4BAAaW,eAAb,CAA6BT,QAA7B,EAAuC,MAAvC,EAA+C,KAA/C;AACA,gCAAEM,KAAF,CAAQJ,EAAR;AACF,aALD,MAKO;AAAEA;AAAO;;AAEhB1D,kBAAM0C,QAAN,CAAeC,OAAf,CAAuBuB,IAAvB,CAA4BjB,aAA5B;AACAH,kBAAMqB,SAAN,GAAkB,IAAlB;AACArE,gBAAIwB,MAAJ,CAAW,OAAX;AACF,UA1BD;AA2BF,OArCD;;AAuCAtB,YAAM0C,QAAN,CAAenB,MAAf,GAAwB,UAACuB,KAAD,EAAW;AAChC,aAAMI,sBAAsBlD,MAAMsB,MAAN,CAAamB,YAAzC;AACA,aAAMnB,SAASP,EAAEmC,mBAAF,CAAf;AACA,aAAMkB,QAAQ9C,OAAO+C,UAAP,EAAd;AACA,aAAID,SAAStB,KAAb,EAAoB;AACjB,gBAAMwB,SAAS,iBAAEC,IAAF,CAAOH,MAAME,MAAb,EAAqB,UAACE,CAAD,EAAO;AAAE,sBAAOA,EAAEC,OAAF,CAAUC,IAAV,KAAmB5B,KAAnB,IAA4B0B,EAAEC,OAAF,CAAUE,EAAV,KAAiB,WAApD;AAAkE,aAAhG,CAAf;AACA,gBAAIL,MAAJ,EAAY;AACT,mBAAMM,mBAAmBR,MAAMS,oBAAN,EAAzB;AACA;AACAP,sBAAOQ,kBAAP;AACA;AACAR,sBAAO/C,MAAP;AACA;AACA,gCAAEuC,KAAF,CAAQ,YAAM;AACX,sBAAIiB,wBAAwB,CAA5B;AACAX,wBAAME,MAAN,CAAaU,OAAb,CAAqB,UAACR,CAAD,EAAO;AACzB,yBAAI,CAACA,EAAEC,OAAF,CAAUQ,YAAV,IAA0BT,EAAEC,OAAF,CAAUS,gBAArC,KAA0DV,EAAEC,OAAF,CAAUE,EAAV,CAAanE,OAAb,CAAqB,WAArB,KAAqC,CAAC,CAApG,EAAuG;AACpG,0BAAEuE,qBAAF;AACF;AACH,mBAJD;AAKA,sBAAIA,yBAAyB,CAA7B,EAAgC;AAC7BX,2BAAME,MAAN,CAAaU,OAAb,CAAqB,UAACR,CAAD,EAAO;AACzB,4BAAI,CAACA,EAAEC,OAAF,CAAUQ,YAAV,IAA0BT,EAAEC,OAAF,CAAUS,gBAArC,KAA0DV,EAAEC,OAAF,CAAUE,EAAV,CAAanE,OAAb,CAAqB,WAArB,KAAqC,CAAC,CAApG,EAAuG;AACpGgE,6BAAEW,MAAF,CAAS;AACNC,uCAASC;AADH,4BAAT;AAGAtE,6BAAEmC,mBAAF,EAAuBE,IAAvB,CAA4B,kBAA5B,EAAgD,IAAhD;AACAf,mCAAQ,CAAC,qBAAD,CAAR,EAAiC,UAACiB,YAAD,EAAkB;AAChD,kCAAME,WAAWN,oBAAoBO,OAApB,CAA4B,GAA5B,EAAiC,EAAjC,EAAqCA,OAArC,CAA6C,QAA7C,EAAuD,EAAvD,CAAjB;AACAH,2CAAaK,+BAAb,CAA6CH,QAA7C,EAAuD,IAAvD;AACF,4BAHD;AAIA,4CAAEM,KAAF,CACG,YAAM;AACHzB,sCAAQ,CAAC,eAAD,CAAR,EAA2B,UAACkB,MAAD,EAAU;AAClCA,wCAAOS,OAAP,CAAed,mBAAf,EADkC,CACG;AACvC,+BAFD;AAGF,4BALJ;AAOA,kCAAO,KAAP;AACF;AACH,sBAnBD;AAoBF;AACDkB,wBAAMkB,oBAAN,CAA2BV,gBAA3B;AACF,gBA9BD;AA+BF;;AAED,gBAAIW,aAAa,KAAjB;AACAvF,kBAAM0C,QAAN,CAAexC,KAAf,CAAqB8E,OAArB,CAA6B,UAACQ,MAAD,EAAY;AACtCA,sBAAOC,UAAP,CAAkBT,OAAlB,CAA0B,UAACU,SAAD,EAAe;AACtCA,4BAAUC,WAAV,CAAsBX,OAAtB,CAA8B,UAAC1E,GAAD,EAAS;AACpC,yBAAIA,IAAIC,YAAJ,KAAqBuC,KAAzB,EAAgC;AAC7BxC,4BAAI6D,SAAJ,GAAgB,KAAhB;AACAoB,qCAAa,IAAb;AACF;AACD,4BAAO,CAACA,UAAR;AACF,mBAND;AAOA,yBAAO,CAACA,UAAR;AACF,gBATD;AAUA,sBAAO,CAACA,UAAR;AACF,aAZD;AAaAvF,kBAAM0C,QAAN,CAAeC,OAAf,CAAuBiD,MAAvB,CAA8B5F,MAAM0C,QAAN,CAAeC,OAAf,CAAuBnC,OAAvB,CAA+BsC,KAA/B,CAA9B,EAAqE,CAArE;AACAxB,mBAAOyC,OAAP,CAAe,sBAAf,EAAuC,EAACd,eAAeH,KAAhB,EAAvC;AACF;AAEH,OAhED;;AAkEA/C,iBAAW,sBAAG8F,IAAH,CAAQhF,KAAK,CAAL,CAAR,EAAiBb,KAAjB,CAAX;AACF,IAzHD;;AA2HA,OAAM8F,kBAAkB,SAAlBA,eAAkB,CAAC1B,KAAD,EAAW;AAChC/B,cAAQ,CAAC,yBAAD,CAAR,EAAqC,UAACsD,WAAD,EAAiB;AACnD,aAAMI,iBAAiB3B,MAAME,MAAN,CAAa,CAAb,EAAgBG,OAAhB,CAAwBC,IAA/C;AACA,aAAM/B,UAAU,iBAAEtC,MAAF,CAAS+D,MAAME,MAAf,EAAuB,UAACE,CAAD,EAAIwB,KAAJ,EAAc;AAClD,mBAAOxB,EAAEC,OAAF,CAAUQ,YAAV,IAA0BT,EAAEC,OAAF,CAAUE,EAAV,KAAiB,WAA3C,IAA0DqB,UAAU,CAA3E;AACF,UAFe,EAEbC,GAFa,CAET,UAACzB,CAAD;AAAA,mBAAOA,EAAEC,OAAF,CAAUC,IAAjB;AAAA,UAFS,KAEiB,EAFjC;;AAIA,aAAMwB,aAAaP,YAAYQ,aAAZ,MAA+B,EAAlD;AACAD,oBAAWlB,OAAX,CAAmB,UAACQ,MAAD,EAAY;AAC5BA,mBAAOC,UAAP,CAAkBT,OAAlB,CAA0B,UAACU,SAAD,EAAe;AACtCA,yBAAUC,WAAV,CAAsBX,OAAtB,CAA8B,UAAC1E,GAAD,EAAS;AACpC,sBAAG,iBAAE8F,QAAF,CAAWzD,OAAX,EAAoBrC,IAAIC,YAAxB,KAAyCwF,mBAAmBzF,IAAIC,YAAnE,EAAiFD,IAAI6D,SAAJ,GAAgB,IAAhB,CAAjF,KACK7D,IAAI6D,SAAJ,GAAgB,KAAhB;AACP,gBAHD;AAIF,aALD;AAMF,UAPD;;AASAnE,eAAM0C,QAAN,CAAexC,KAAf,GAAuBgG,UAAvB;AACAlG,eAAM0C,QAAN,CAAeC,OAAf,GAAyBA,OAAzB;AACF,OAlBD;AAmBF,IApBD;;AAsBA,OAAI0D,aAAa,IAAjB;AACO,OAAMC,kCAAa,SAAbA,UAAa,CAAEpD,mBAAF,EAAuBhC,KAAvB,EAAkC;AACzDT,aAAOoD,IAAP,CAAY,YAAM;AACf7D,eAAMsB,MAAN,CAAaJ,KAAb,GAAqB,yBAAyBF,IAAzB,MAAmCE,QAAQ,QAAQA,KAAhB,GAAwB,EAA3D,CAArB;AACAlB,eAAMsB,MAAN,CAAamB,YAAb,GAA4BS,mBAA5B;AACAlD,eAAM0C,QAAN,CAAeC,OAAf,GAAyB5B,EAAEmC,mBAAF,EAAuBE,IAAvB,CAA4B,kBAA5B,KAAmD,EAA5E;;AAEA,aAAMgB,QAAQrD,EAAEmC,mBAAF,EAAuBmB,UAAvB,EAAd;AACAyB,yBAAgB1B,KAAhB;AACA,aAAMmC,cAAcF,cAAc5E,cAAlC;AACA3B,aAAIwB,MAAJ,CAAW,MAAX;AACA+E,sBAAa,KAAb;AACF,OAVD,EAUGG,KAVH,CAUSC,QAAQC,KAAR,CAAcb,IAAd,CAAmBY,OAAnB,CAVT;AAWF,IAZM;;qBAcQ,EAAEH,sBAAF,E","file":"overlayManagement.js","sourcesContent":["/* created by arnab, on May 25, 2016 */\nimport liveapi from '../../websockets/binary_websockets';\nimport rv from '../../common/rivetsExtra';\nimport _ from 'lodash';\nimport html from 'text!./overlayManagement.html';\nimport 'css!./overlayManagement.css';\n\nlet win = null;\nlet win_view = null;\nlet state = {};\n\n/* rviets formatter to filter indicators based on their category */\nrv.formatters['overlays-filter'] = (array, search) => {\n   search = search && search.toLowerCase();\n   return array && array.filter(\n      (ind) => ind.display_name.toLowerCase().indexOf(search) !== -1\n   );\n};\n\nconst init = () => {\n   if(!win) {\n      return init_dialog_async(html);\n   }\n   return Promise.resolve();\n}\n\nconst init_dialog_async = (root) => {\n   return new Promise((resolve, reject) => {\n      root = $(root).i18n();\n\n      let option = {\n         title: 'Add/remove overlays'.i18n(),\n         modal: true,\n         destroy: () => {\n            win_view && win_view.unbind();\n            win_view = null;\n            win.dialog('destroy').remove();\n            win = null;\n         },\n         open: () => { },\n      };\n\n      /* affiliates route */\n      if (isAffiliates()) {\n         option = _.extend(option, {\n            resizable: false,\n            width: Math.min(480, $(window).width() - 10),\n            height: 400,\n            ignoreTileAction: true,\n            maximizable: false,\n            minimizable: false,\n            collapsable: false,\n         });\n      } else {\n         option = _.extend(option, {\n            width: 700,\n            // minHeight: 60,\n         })\n      }\n\n      /* normal route */\n      require(['windows/windows'], (windows) => {\n         win = windows.createBlankWindow(root, option);\n         init_state(root);\n         resolve();\n      });\n\n   });\n}\n\nconst init_state = (root) =>{\n   state = {\n      dialog: {\n         title: 'Add/remove overlays'.i18n(),\n         container_id: ''\n      },\n      overlays: {\n         search: '',\n         array: [],\n         current: []\n      }\n   };\n\n   state.overlays.clear_search = () => { state.overlays.search = ''; }\n\n   state.overlays.add = (ovlay) => {\n      const symbol = ovlay.symbol;\n      const delay_amount = ovlay.delay_amount;\n      const displaySymbol = ovlay.display_name;\n      const containerIDWithHash = state.dialog.container_id;\n      const mainSeries_timePeriod = $(containerIDWithHash).data(\"timePeriod\");\n      const dialog = $(containerIDWithHash);\n      const type = dialog.data(\"type\");\n\n      //validate time period of the main series\n      require(['charts/chartOptions', \"charts/charts\", \"common/util\"], (chartOptions, charts) => {\n         const newTabId = containerIDWithHash.replace(\"#\", \"\").replace(\"_chart\", \"\");\n         const dialog = $(containerIDWithHash);\n         const fn = () => {\n            dialog.data(\"overlayIndicator\", true);\n            chartOptions.disableEnableCandlestickAndOHLC( newTabId, false );\n            charts.overlay(containerIDWithHash, symbol, displaySymbol, delay_amount)\n               .then(() => {\n                  const overlay = { symbol: symbol, displaySymbol: displaySymbol, delay_amount: delay_amount};\n                  //Waiting for overlays to be applied.\n                  _.defer(() => {\n                     dialog.trigger('chart-overlay-add', overlay);\n                     charts.refresh( containerIDWithHash );\n                  });\n               })\n         };\n         if (type === 'candlestick' || type == 'ohlc') {\n            dialog.data('type', 'line');\n            dialog.trigger('chart-type-changed', 'line');\n            chartOptions.selectChartType(newTabId, 'line', false);\n            _.defer(fn);\n         } else { fn(); }\n\n         state.overlays.current.push(displaySymbol);\n         ovlay.dont_show = true;\n         win.dialog(\"close\");\n      });\n   }\n\n   state.overlays.remove = (ovlay) => {\n      const containerIDWithHash = state.dialog.container_id;\n      const dialog = $(containerIDWithHash);\n      const chart = dialog.highcharts();\n      if (chart && ovlay) {\n         const series = _.find(chart.series, (s) => { return s.options.name === ovlay && s.options.id !== 'navigator'; });\n         if (series) {\n            const indicator_series = chart.get_indicator_series();\n            //Remove current price line first\n            series.removeCurrentPrice();\n            //Then remove the series\n            series.remove();\n            //Re-validate chart\n            _.defer(() => {\n               let countInstrumentSeries = 0;\n               chart.series.forEach((s) => {\n                  if ((s.options.isInstrument || s.options.onChartIndicator) && s.options.id.indexOf('navigator') == -1) {\n                     ++countInstrumentSeries;\n                  }\n               });\n               if (countInstrumentSeries == 1) {\n                  chart.series.forEach((s) => {\n                     if ((s.options.isInstrument || s.options.onChartIndicator) && s.options.id.indexOf('navigator') == -1) {\n                        s.update({\n                           compare: undefined\n                        });\n                        $(containerIDWithHash).data('overlayIndicator', null);\n                        require(['charts/chartOptions'], (chartOptions) => {\n                           const newTabId = containerIDWithHash.replace(\"#\", \"\").replace(\"_chart\", \"\");\n                           chartOptions.disableEnableCandlestickAndOHLC(newTabId, true);\n                        });\n                        _.defer(\n                           () => {\n                              require([\"charts/charts\"], (charts)=>{\n                                 charts.refresh(containerIDWithHash); //Refresh chart when all the overlays are removed.\n                              });\n                           }\n                        )\n                        return false;\n                     }\n                  });\n               }\n               chart.set_indicator_series(indicator_series);\n            });\n         }\n\n         let break_loop = false;\n         state.overlays.array.forEach((market) => {\n            market.submarkets.forEach((submarket) => {\n               submarket.instruments.forEach((ind) => {\n                  if (ind.display_name === ovlay) {\n                     ind.dont_show = false;\n                     break_loop = true;\n                  }\n                  return !break_loop;\n               });\n               return !break_loop;\n            });\n            return !break_loop;\n         });\n         state.overlays.current.splice(state.overlays.current.indexOf(ovlay), 1);\n         dialog.trigger('chart-overlay-remove', {displaySymbol: ovlay});\n      }\n\n   }\n\n   win_view = rv.bind(root[0], state);\n}\n\nconst update_overlays = (chart) => {\n   require(['instruments/instruments'], (instruments) => {\n      const mainSeriesName = chart.series[0].options.name;\n      const current = _.filter(chart.series, (s, index) => {\n         return s.options.isInstrument && s.options.id !== 'navigator' && index !== 0;\n      }).map((s) => s.options.name) || [];\n\n      const marketData = instruments.getMarketData() || [];\n      marketData.forEach((market) => {\n         market.submarkets.forEach((submarket) => {\n            submarket.instruments.forEach((ind) => {\n               if(_.includes(current, ind.display_name) || mainSeriesName === ind.display_name) ind.dont_show = true;\n               else ind.dont_show = false;\n            });\n         });\n      });\n\n      state.overlays.array = marketData;\n      state.overlays.current = current;\n   });\n}\n\nlet first_time = true;\nexport const openDialog = ( containerIDWithHash, title ) => {\n   init().then(() => {\n      state.dialog.title = 'Add/remove comparisons'.i18n() + (title ? ' - ' + title : '');\n      state.dialog.container_id = containerIDWithHash;\n      state.overlays.current = $(containerIDWithHash).data('overlays-current') || [];\n\n      const chart = $(containerIDWithHash).highcharts();\n      update_overlays(chart);\n      const normal_open = first_time || isAffiliates();\n      win.dialog('open');\n      first_time = false;\n   }).catch(console.error.bind(console));\n}\n\nexport default { openDialog }\n\n"]}