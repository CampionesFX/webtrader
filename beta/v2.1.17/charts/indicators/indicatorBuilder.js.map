{"version":3,"sources":["../../../../../src/charts/indicators/indicatorBuilder.es6"],"names":["before_add_callback","closeDialog","dialog","remove","init","chart","indicator","require","$html","state","id","fields","map","f","is_valid","levels","formula","description","cdl_indicator","dash_styles","name","dash","url","update_value","row","value","level","marginTop","visible","add","forEach","field","key","label","text","values","push","cancel","inx","indexOf","splice","e","btn","target","find","next","height","content","animate","scrollTop","prop","editable","current_options","opt_val","opt_key","cloneDeep","view","bind","options","title","long_display_name","autoOpen","resizable","width","modal","my","at","of","window","dialogClass","buttons","click","fields_are_valid","JSON","parse","stringify","type","length","color","from","minBy","to","maxBy","cdlIndicatorCode","onSeriesID","series","growl","error","message","i18n","addIndicator","icons","close","minimize","maximize","dialogExtend","extend","maximizable","minimizable","collapsable","open","containerIDWithHash","before_add_cb","highcharts"],"mappings":"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","file":"indicatorBuilder.js","sourcesContent":["/**\n * Created by arnab on 3/1/15.\n */\n\nimport $ from \"jquery\";\nimport _ from \"lodash\";\nimport rv from '../../common/rivetsExtra';\nimport 'jquery-ui';\nimport 'color-picker';\nimport 'ddslick';\n\nlet before_add_callback = null;\n\nconst closeDialog = (dialog) => {\n    dialog.dialog(\"destroy\").remove();\n}\n\nconst init = async (chart, indicator) => {\n\n    require(['css!charts/indicators/indicatorBuilder.css']);\n\n    let [$html] = await require(['text!charts/indicators/indicatorBuilder.html']);\n\n    const state = {\n      id: indicator.id,\n      fields: indicator.fields.map(f => ({...f, is_valid: true})),\n      levels: indicator.levels, /* optional */\n      formula: indicator.formula, /* optional */\n      description: indicator.description,\n      cdl_indicator: indicator.cdl_indicator, /* optional (cdl indicators only) */\n      dash_styles: [\n        \"Solid\", \"ShortDash\", \"ShortDot\", \"ShortDashDot\", \"ShortDashDotDot\",\n        \"Dot\", \"Dash\", \"LongDash\", \"DashDot\", \"LongDashDot\", \"LongDashDotDot\"\n      ].map(dash => ({ name: dash, url: `images/dashstyle/${dash}.svg`})),\n      update_value(row, value) {\n        row.value = value;\n      },\n      level: {\n        dialog: {\n          marginTop: '0px',\n          visible: false,\n          add: () => {\n            const fields = state.levels.fields;\n            const level = { };\n            fields.forEach(field => level[field.key] = field.value);\n            level.label = { text: level.value };\n            state.levels.values.push(level);\n            state.level.dialog.visible = false;\n          },\n          cancel: () => { state.level.dialog.visible = false; }\n       },\n        remove: row => {\n          const values = state.levels.values;\n          const inx = values.indexOf(row);\n          inx !== -1 && values.splice(inx, 1);\n        },\n        add: (e) => {\n          const btn = $(e.target);\n          const marginTop =  $html.find('.levels-tr').next().height() - 3;\n          state.level.dialog.marginTop = marginTop*-1 + 'px';\n          state.level.dialog.visible = !state.level.dialog.visible;\n          if(state.level.dialog.visible) {\n            const content = $('.indicator-builder');\n            content.animate({ scrollTop: content.prop('scrollHeight')}, 700);\n          }\n        }\n      }\n    }\n\n    if(indicator.editable && indicator.current_options) {\n      _.forEach(indicator.current_options, (opt_val, opt_key) => {\n        const field = _.find(state.fields, {key: opt_key})\n        field && (field.value = opt_val);\n      });\n\n      if(indicator.current_options.levels) {\n        state.levels.values = _.cloneDeep(indicator.current_options.levels);\n      }\n    }\n\n\n    $html = $($html);\n    const view = rv.bind($html[0], state);\n\n    const options = {\n        title: indicator.long_display_name,\n        autoOpen: false,\n        resizable: false,\n        width: 350,\n        height: 400,\n        modal: true,\n        my: 'center',\n        at: 'center',\n        of: window,\n        dialogClass:'indicator-builder-ui-dialog',\n        buttons: [\n            {\n                text: \"OK\",\n                click: () => {\n                    const options = { };\n                    let fields_are_valid = true;\n                    if(!indicator.cdl_indicator) { /* normal indicator */\n                      if(state.levels) {\n                        options.levels = JSON.parse(JSON.stringify(state.levels.values));\n                      }\n                      state.fields.forEach(field => {\n                         fields_are_valid = field.is_valid && fields_are_valid;\n                         if(field.type !== 'plotcolor') {\n                            options[field.key] = field.value\n                            return;\n                         }\n                         options[field.key] = [];\n                         if(options.levels && options.levels.length > 0) {\n                            options[field.key].push({\n                               color: field.value,\n                               from: _.minBy(options.levels, 'value').value,\n                               to: _.maxBy(options.levels, 'value').value\n                            });\n                         }\n                      });\n                    }\n                    else { /* cdl indicator */\n                       options.cdlIndicatorCode = state.id;\n                       options.onSeriesID = chart.series[0].options.id\n                    }\n\n                   if(state.id === 'fractal') { /* special case */\n                       options.onSeriesID = chart.series[0].options.id\n                   }\n\n                   if(!fields_are_valid) {\n                      $.growl.error({ message: \"Invalid parameter(s)!\".i18n() });\n                      return;\n                   }\n\n                    before_add_callback && before_add_callback();\n\n                    //Add indicator for the main series\n                    chart.series[0].addIndicator(state.id, options);\n\n                    closeDialog($html);\n                }\n            },\n            {\n                text: \"Cancel\",\n                click: () => closeDialog($html)\n            }\n        ],\n        icons: {\n            close: 'custom-icon-close',\n            minimize: 'custom-icon-minimize',\n            maximize: 'custom-icon-maximize'\n        }\n    };\n    $html.dialog(options)\n      .dialogExtend(_.extend(options, {maximizable:false, minimizable:false, collapsable:false}));\n    return $html;\n}\n\n/**\n * @param indicator - indicator options from indicators.json\n * @param containerIDWithHash - containerId where indicator needs to be added\n * @param before_add_cb - callback that will be called just before adding the indicator\n */\nexport const open = async (indicator, containerIDWithHash, before_add_cb) => {\n    before_add_callback = before_add_cb || before_add_callback;\n\n    const chart = $(containerIDWithHash).highcharts();\n    await init(chart, indicator);\n\n    $(\".indicator-builder\").dialog('open');\n    $(\".indicator-builder\").animate({ scrollTop: 0 }, 800);\n}\nexport default { open, };\n"]}