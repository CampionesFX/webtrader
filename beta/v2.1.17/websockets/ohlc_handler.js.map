{"version":3,"sources":["../../../../src/websockets/ohlc_handler.es6"],"names":["barsTable","processCandles","key","time","open","high","low","close","bar","chain","find","instrumentCdAndTp","limit","data","length","update","insert","events","on","echo_req","ticks_history","granularity","toUpperCase","candles","forEach","eachData","parseFloat","parseInt","epoch","barsLoaded","history","times","index","price","prices","retrieveChartDataAndRender","options","timePeriod","instrumentCode","containerIDWithHash","instrumentName","series_compare","keyFor","subscribe","Promise","resolve","done_promise","register","symbol","delayAmount","style","isTick","count","adjust_start_time","catch","err","msg","i18n","replace","require","$","growl","error","message","chart","highcharts","showLoading","console","then","warning","timerHandler","setInterval","lastBar","simplesort","requestObject","convertToTimeperiodObject","timeInSeconds","send","chartIDs","push"],"mappings":"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","file":"ohlc_handler.js","sourcesContent":["import liveapi from './binary_websockets';\nimport chartingRequestMap from '../charts/chartingRequestMap';\nimport $ from 'jquery';\nimport 'jquery-growl';\nimport 'common/util';\n\nconst barsTable = chartingRequestMap.barsTable;\n\nconst processCandles = (key, time, open, high, low, close) => {\n   let bar = barsTable.chain()\n      .find({time : time})\n      .find({instrumentCdAndTp : key})\n      .limit(1)\n      .data();\n   if (bar && bar.length > 0) {\n      bar = bar[0];\n      bar.open = open;\n      bar.high = high;\n      bar.low = low;\n      bar.close = close;\n      barsTable.update(bar);\n   } else {\n      barsTable.insert({\n         instrumentCdAndTp : key,\n         time: time,\n         open: open,\n         high: high,\n         low: low,\n         close: close\n      });\n   }\n};\n\nliveapi.events.on('candles', (data) => {\n   const key = (data.echo_req.ticks_history + data.echo_req.granularity).toUpperCase();\n   data.candles.forEach((eachData) => {\n      const open  = parseFloat(eachData.open),\n         high  = parseFloat(eachData.high),\n         low   = parseFloat(eachData.low),\n         close = parseFloat(eachData.close),\n         time  = parseInt(eachData.epoch) * 1000;\n      processCandles(key, time, open, high, low, close);\n   });\n   chartingRequestMap.barsLoaded(key);\n});\n\nliveapi.events.on('history', (data) => {\n   //For tick history handling\n   const key = (data.echo_req.ticks_history + '0').toUpperCase();\n   data.history.times.forEach((eachData,index) => {\n      const time = parseInt(eachData) * 1000,\n         price = parseFloat(data.history.prices[index]);\n      processCandles(key, time, price, price, price, price);    \n   });\n   chartingRequestMap.barsLoaded(key);\n});\n\n/**\n * @param timePeriod\n * @param instrumentCode\n * @param containerIDWithHash\n * @param instrumentName\n * @param series_compare\n */\nexport const retrieveChartDataAndRender = (options) => {\n   const timePeriod = options.timePeriod,\n      instrumentCode = options.instrumentCode,\n      containerIDWithHash = options.containerIDWithHash,\n      instrumentName = options.instrumentName,\n      series_compare = options.series_compare;\n\n   const key = chartingRequestMap.keyFor(instrumentCode, timePeriod);\n   if (chartingRequestMap[key]) {\n      /* Since streaming for this instrument+timePeriod has already been requested,\n                   we just take note of containerIDWithHash so that once the data is received, we will just\n                   call refresh for all registered charts */\n      chartingRequestMap.subscribe(key, {\n         containerIDWithHash : containerIDWithHash,\n         series_compare : series_compare,\n         instrumentCode : instrumentCode,\n         instrumentName : instrumentName\n      });\n      /* We still need to call refresh the chart with data we already received\n                   Use local caching to retrieve that data.*/\n      chartingRequestMap.barsLoaded(key);\n      return Promise.resolve();\n   }\n\n   const done_promise = chartingRequestMap.register({\n      symbol: instrumentCode,\n      granularity: timePeriod,\n      subscribe: options.delayAmount === 0 ? 1 : 0,\n      style: !isTick(timePeriod) ? 'candles' : 'ticks',\n      count: 1000,          //We are only going to request 1000 bars if possible\n      adjust_start_time: 1\n   })\n      .catch((err) => {\n         const msg = 'Error getting data for %1'.i18n().replace('%1', instrumentName);\n         require([\"jquery\", \"jquery-growl\"], ($) => $.growl.error({ message: msg }) );\n         const chart = $(containerIDWithHash).highcharts();\n         chart && chart.showLoading(msg);\n         console.error(err);\n      })\n      .then((data) => {\n         if (data && !data.error && options.delayAmount > 0) {\n            //start the timer\n            require([\"jquery-growl\"], () => $.growl.warning({\n               message: instrumentName + ' feed is delayed by '.i18n() +\n               options.delayAmount + ' minutes'.i18n()\n            })\n            );\n            chartingRequestMap[key].timerHandler = setInterval(() => {\n               let lastBar = barsTable.chain()\n                  .find({instrumentCdAndTp : key})\n                  .simplesort('time', true)\n                  .limit(1)\n                  .data();\n               if (lastBar && lastBar.length > 0) {\n                  lastBar = lastBar[0];\n                  //requests new bars\n                  //Send the WS request\n                  const requestObject = {\n                     \"ticks_history\": instrumentCode,\n                     \"end\": 'latest',\n                     //\"count\": count,\n                     \"start\": (lastBar.time/1000) | 0,\n                     \"granularity\":  convertToTimeperiodObject(timePeriod).timeInSeconds()\n                  };\n                  liveapi.send(requestObject);\n               }\n            }, 60*1000);\n         }\n      });\n\n   chartingRequestMap[key].chartIDs.push({\n      containerIDWithHash : containerIDWithHash,\n      series_compare : series_compare,\n      instrumentCode : instrumentCode,\n      instrumentName : instrumentName\n   });\n   return done_promise;\n}\n\nexport default {\n   retrieveChartDataAndRender,\n};\n"]}